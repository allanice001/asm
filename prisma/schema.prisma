// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(cuid())
  name           String
  email          String          @unique
  emailVerified  DateTime?       @map("email_verified")
  password       String
  image          String?
  role           String          @default("user")
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @default(now()) @map("updated_at")
  accounts       Account[]
  sessions       Session[]
  deployments    Deployment[]
  auditLogs      AuditLog[]
  policyVersions PolicyVersion[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model AwsAccount {
  id               String                  @id @default(cuid())
  accountId        String                  @unique @map("account_id") @db.VarChar(12)
  accountName      String                  @map("account_name")
  accountEmail     String                  @map("account_email")
  organizationId   String?                 @map("organization_id")
  isManagement     Boolean                 @default(false) @map("is_management")
  ouPath           String?                 @map("ou_path")
  createdAt        DateTime                @default(now()) @map("created_at")
  updatedAt        DateTime                @default(now()) @map("updated_at")
  permissionSets   AccountPermissionSet[]
  specificPolicies AccountSpecificPolicy[]
  deployments      Deployment[]

  @@map("aws_accounts")
}

model PermissionSet {
  id              String                 @id @default(cuid())
  name            String                 @unique
  description     String?                @db.Text
  sessionDuration String                 @default("PT8H") @map("session_duration")
  relayState      String?                @map("relay_state")
  createdAt       DateTime               @default(now()) @map("created_at")
  updatedAt       DateTime               @default(now()) @map("updated_at")
  policies        PermissionSetPolicy[]
  accounts        AccountPermissionSet[]

  @@map("permission_sets")
}

model Policy {
  id                String                  @id @default(cuid())
  name              String
  description       String?                 @db.Text
  policyDocument    Json                    @map("policy_document")
  isAwsManaged      Boolean                 @default(false) @map("is_aws_managed")
  policyArn         String?                 @map("policy_arn")
  isAccountSpecific Boolean                 @default(false) @map("account_specific")
  createdAt         DateTime                @default(now()) @map("created_at")
  updatedAt         DateTime                @default(now()) @map("updated_at")
  permissionSets    PermissionSetPolicy[]
  accountSpecific   AccountSpecificPolicy[]
  versions          PolicyVersion[]

  @@map("policies")
}

model PermissionSetPolicy {
  id              String        @id @default(cuid())
  permissionSetId String        @map("permission_set_id")
  policyId        String        @map("policy_id")
  createdAt       DateTime      @default(now()) @map("created_at")
  permissionSet   PermissionSet @relation(fields: [permissionSetId], references: [id], onDelete: Cascade)
  policy          Policy        @relation(fields: [policyId], references: [id], onDelete: Cascade)

  @@unique([permissionSetId, policyId])
  @@map("permission_set_policies")
}

model AccountPermissionSet {
  id              String        @id @default(cuid())
  accountId       String        @map("account_id")
  permissionSetId String        @map("permission_set_id")
  createdAt       DateTime      @default(now()) @map("created_at")
  account         AwsAccount    @relation(fields: [accountId], references: [id], onDelete: Cascade)
  permissionSet   PermissionSet @relation(fields: [permissionSetId], references: [id], onDelete: Cascade)

  @@unique([accountId, permissionSetId])
  @@map("account_permission_sets")
}

model AccountSpecificPolicy {
  id             String     @id @default(cuid())
  accountId      String     @map("account_id")
  policyId       String     @map("policy_id")
  policyDocument Json       @map("policy_document")
  createdAt      DateTime   @default(now()) @map("created_at")
  updatedAt      DateTime   @default(now()) @map("updated_at")
  account        AwsAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)
  policy         Policy     @relation(fields: [policyId], references: [id], onDelete: Cascade)

  @@unique([accountId, policyId])
  @@map("account_specific_policies")
}

model Deployment {
  id          String     @id @default(cuid())
  userId      String     @map("user_id")
  accountId   String     @map("account_id")
  status      String
  startedAt   DateTime   @default(now()) @map("started_at")
  completedAt DateTime?  @map("completed_at")
  logOutput   String?    @map("log_output") @db.Text
  user        User       @relation(fields: [userId], references: [id])
  account     AwsAccount @relation(fields: [accountId], references: [id])

  @@map("deployments")
}

model AuditLog {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  action       String
  resourceType String   @map("resource_type")
  resourceId   String   @map("resource_id")
  details      Json?
  createdAt    DateTime @default(now()) @map("created_at")
  user         User     @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

model PolicyVersion {
  id             String   @id @default(cuid())
  policyId       String   @map("policy_id")
  versionNumber  Int      @map("version_number")
  policyDocument Json     @map("policy_document")
  createdAt      DateTime @default(now()) @map("created_at")
  createdById    String   @map("created_by_id")
  isActive       Boolean  @default(false) @map("is_active")
  policy         Policy   @relation(fields: [policyId], references: [id], onDelete: Cascade)
  createdBy      User     @relation(fields: [createdById], references: [id])

  @@unique([policyId, versionNumber])
  @@map("policy_versions")
}
